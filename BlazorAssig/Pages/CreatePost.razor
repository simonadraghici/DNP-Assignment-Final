@page "/CreatePost"
@attribute [Authorize]
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@inject IPostService PostService
@inject NavigationManager NavMgr


<div class="card">
    <h3>Create Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <input type="text" @bind="postTitle"/>
        <label>Context:</label>
        <input type="text" @bind="context"/>
    </div>
    <div class="button-row">
        @if (!string.IsNullOrEmpty(msg))
        {
            <label style="color: @color">@msg</label>
        }
        <button @onclick="Create" class="acceptbtn">Create</button>
    </div>
</div>

@code {
    private string postTitle = "";
    private string context = "";
    private string msg = "";
    private string color = "";
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private string? _userName;
    private bool _isLoggedIn;
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        _isLoggedIn = user.Identity != null;
        
        if (!_isLoggedIn) return;
        _userName = user.Identity!.Name!;

    }
    
    private async Task Create()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
        
        try
        {
            PostCreationDto dto = new(_userName, postTitle, context);
            await PostService.Create(dto);
            postTitle = "";
            context = "";
            color = "green";
            msg = "Post successfully created!";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
            color = "red";
        }
    }
}